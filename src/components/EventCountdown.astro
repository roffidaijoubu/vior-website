---
import { formatInTimeZone } from 'date-fns-tz';

interface Props {
  eventName: string;
  eventImage: string;
  eventUrl: string;
  eventDatetime: Date;
  eventButtonLabel?: string;
  eventStartedButtonLabel?: string;
  eventSecondaryUrl?: {
    label: string;
    url: string;
  };
}

const { 
  eventName, 
  eventImage, 
  eventUrl, 
  eventDatetime, 
  eventButtonLabel = "Go to Waiting Room", 
  eventStartedButtonLabel = "Watch Stream",
  eventSecondaryUrl 
} = Astro.props;

// Generate a unique ID for this component instance
const countdownId = `countdown-${Math.random().toString(36).substr(2, 9)}`;

const wibTimeZone = 'Asia/Jakarta';

const formatDate = (date: Date) => formatInTimeZone(date, wibTimeZone, "yyyyMMdd'T'HHmmss");
const googleCalendarUrl = `https://www.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent(eventName)}&dates=${formatDate(eventDatetime)}/${formatDate(eventDatetime)}&location=${encodeURIComponent(eventUrl)}&sf=true&output=xml`;

const icsData = `BEGIN:VCALENDAR
VERSION:2.0
BEGIN:VEVENT
URL:${eventUrl}
LOCATION:${eventUrl}
DTSTART:${formatDate(eventDatetime)}
DTEND:${formatDate(eventDatetime)}
SUMMARY:${eventName}
END:VEVENT
END:VCALENDAR`;

const icsFile = `data:text/calendar;charset=utf-8,${encodeURIComponent(icsData)}`;

const now = new Date();
const hasStarted = now > eventDatetime;
const currentButtonLabel = hasStarted ? eventStartedButtonLabel : eventButtonLabel;

// ... rest of the existing code ...
---

<div class="bg-white rounded-lg p-6 my-8">
    <img src={eventImage} alt={eventName} class="w-full rounded-lg object-cover m-2 mx-auto shadow-md" />

  <h3 class="text-xl font-bold mb-4 text-secondary text-center">{eventName}</h3>
  <div class="flex flex-col md:flex-row gap-6">
    <div class="flex-1 text-center">
    <div id={countdownId} class="text-3xl font-bold mb-4 text-secondary"></div>

      <p class="text-lg mb-2 text-base-100/70">
        <i class="fas fa-calendar-alt mr-2"></i>
        {formatInTimeZone(eventDatetime, wibTimeZone, 'MMMM d, yyyy')}
      </p>
      <p class="text-lg text-base-100/70 mb-4">
        <i class="fas fa-clock mr-2"></i>
        {formatInTimeZone(eventDatetime, wibTimeZone, 'h:mm a (zzz)')}
      </p>
      <div class="flex flex-col gap-2 mb-2">
        <a href={eventUrl} target="_blank" rel="noopener noreferrer" class="btn btn-secondary btn-lg flex-1 justify-center items-center">
          <i class="fas fa-external-link-alt mr-2"></i>{currentButtonLabel}
        </a>
        {eventSecondaryUrl && (
          <a href={eventSecondaryUrl.url} target="_blank" rel="noopener noreferrer" class="btn btn-secondary btn-outline flex-1 justify-center items-center">
            <i class="fas fa-external-link-alt mr-2"></i>{eventSecondaryUrl.label}
          </a>
        )}
      </div>
      <div class="dropdown dropdown-top dropdown-end w-full">
        <label tabindex="0" class="btn btn-secondary btn-outline w-full">
          <i class="fas fa-bell mr-2"></i>Remind Me
        </label>
        <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
          <li>
            <a href={googleCalendarUrl} target="_blank" rel="noopener noreferrer">
              <i class="fab fa-google mr-2"></i>Add to Google Calendar
            </a>
          </li>
          <li>
            <a href={icsFile} download={`${eventName}.ics`}>
              <i class="fas fa-calendar-plus mr-2"></i>Download .ics
            </a>
          </li>
        </ul>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ eventDatetime, countdownId, wibTimeZone, eventStartedButtonLabel }}>
  function updateCountdown() {
    const now = new Date().getTime();
    const eventTime = new Date(eventDatetime).getTime();
    const timeLeft = eventTime - now;

    const countdownElement = document.getElementById(countdownId);

    if (timeLeft < 0) {
      countdownElement.innerHTML = 'Event has started!';
      // Update button label when event starts
      const buttonElement = document.querySelector(`#${countdownId}`).closest('.bg-white').querySelector('.btn-lg');
      if (buttonElement) {
        buttonElement.innerHTML = `<i class="fas fa-external-link-alt mr-2"></i>${eventStartedButtonLabel}`;
      }
      return;
    }

    const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
    const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

    countdownElement.innerHTML = `</i>${days}d ${hours}h ${minutes}m ${seconds}s`;
  }

  updateCountdown();
  setInterval(updateCountdown, 1000);
</script>